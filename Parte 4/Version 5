//******************************************
// Universidad del Valle de Guatemala
// BE3029 - Electronica Digital 2
// Keren Gamarro
// 25/08/2025
// Proyecto 1 - LM35 con servo tipo semáforo + Display 7 segmentos
// inicia en 0 y va subiendo hasta que se estabiliza
//******************************************

#include <Arduino.h>
#include <stdint.h>

//---------------------------
// Pines LM35 y control
//---------------------------
#define LM35_PIN      34   // Entrada analógica del sensor LM35
#define BOTON_PIN     33   // Botón para activar lectura de temperatura
#define LED_AMARILLO  27   // LED para zona baja
#define LED_NARANJA   26   // LED para zona media
#define LED_ROJO      25   // LED para zona alta

//---------------------------
// Configuración del Servo
//---------------------------
#define SERVO_PIN     13
#define SERVO_CANAL    0
#define SERVO_FREQ    50
#define SERVO_RES     16

//---------------------------
// Segmentos del display 7 segmentos (cátodo común)
//---------------------------
#define SEG_A 23
#define SEG_B 14
#define SEG_C 18
#define SEG_D 15
#define SEG_E 5
#define SEG_F 12
#define SEG_G 4
#define SEG_P 2

#define DIG1 22
#define DIG2 21
#define DIG3 19

//---------------------------
// Variables globales
//---------------------------
bool botonPresionado = false;    // Bandera activada por ISR
float factorCalibracion = 1.0;  // Ajuste de temperatura
float ultimaTemp = 0.0;         // Inicializa en 0 para que el display arranque mostrando 0
float alpha = 0.1;              // Constante EMA (peso del dato nuevo)

// Ángulos fijos para cada zona
const int servoAmarillo = 30;
const int servoNaranja  = 90;
const int servoRojo     = 150;
const int servoMin      = 0;

// Tabla de números → segmentos [a b c d e f g]
const byte numToSeg[10][7] = {
  {1,1,1,1,1,1,0}, // 0
  {0,1,1,0,0,0,0}, // 1
  {1,1,0,1,1,0,1}, // 2
  {1,1,1,1,0,0,1}, // 3
  {0,1,1,0,0,1,1}, // 4
  {1,0,1,1,0,1,1}, // 5
  {1,0,1,1,1,1,1}, // 6
  {1,1,1,0,0,0,0}, // 7
  {1,1,1,1,1,1,1}, // 8
  {1,1,1,1,0,1,1}  // 9
};

//---------------------------
// ISR del botón
//---------------------------
void IRAM_ATTR botonISR() {
  botonPresionado = true;
}

//---------------------------
// Función mover servo según zona
//---------------------------
void moverServoPorZona(float tempC) {
  int duty = 0;

  if (tempC < 22.0) duty = map(servoAmarillo, 0, 180, 1638, 7864);
  else if (tempC <= 25.0) duty = map(servoNaranja, 0, 180, 1638, 7864);
  else duty = map(servoRojo, 0, 180, 1638, 7864);

  ledcWrite(SERVO_CANAL, duty);
}

//---------------------------
// Encender un número en segmentos
//---------------------------
void mostrarDigito(int num, bool punto) {
  digitalWrite(SEG_A, numToSeg[num][0]);
  digitalWrite(SEG_B, numToSeg[num][1]);
  digitalWrite(SEG_C, numToSeg[num][2]);
  digitalWrite(SEG_D, numToSeg[num][3]);
  digitalWrite(SEG_E, numToSeg[num][4]);
  digitalWrite(SEG_F, numToSeg[num][5]);
  digitalWrite(SEG_G, numToSeg[num][6]);
  digitalWrite(SEG_P, punto ? HIGH : LOW);
}

//---------------------------
// Mostrar temperatura con multiplexeo
//---------------------------
void mostrarNumero(float temp) {
  int dec  = (int)temp / 10;
  int uni  = (int)temp % 10;
  int deci = (int)(temp * 10) % 10;

  digitalWrite(DIG1, HIGH); mostrarDigito(dec, false); delay(3); digitalWrite(DIG1, LOW);
  digitalWrite(DIG2, HIGH); mostrarDigito(uni, true);  delay(3); digitalWrite(DIG2, LOW);
  digitalWrite(DIG3, HIGH); mostrarDigito(deci,false);  delay(3); digitalWrite(DIG3, LOW);
}

//---------------------------
// Setup
//---------------------------
void setup() {
  Serial.begin(115200);

  pinMode(LM35_PIN, INPUT);
  pinMode(BOTON_PIN, INPUT_PULLUP);
  pinMode(LED_AMARILLO, OUTPUT);
  pinMode(LED_NARANJA, OUTPUT);
  pinMode(LED_ROJO, OUTPUT);

  pinMode(SEG_A, OUTPUT); pinMode(SEG_B, OUTPUT); pinMode(SEG_C, OUTPUT);
  pinMode(SEG_D, OUTPUT); pinMode(SEG_E, OUTPUT); pinMode(SEG_F, OUTPUT);
  pinMode(SEG_G, OUTPUT); pinMode(SEG_P, OUTPUT);

  pinMode(DIG1, OUTPUT); pinMode(DIG2, OUTPUT); pinMode(DIG3, OUTPUT);

  ledcSetup(SERVO_CANAL, SERVO_FREQ, SERVO_RES);
  ledcAttachPin(SERVO_PIN, SERVO_CANAL);
  ledcWrite(SERVO_CANAL, map(servoMin, 0, 180, 1638, 7864));

  attachInterrupt(digitalPinToInterrupt(BOTON_PIN), botonISR, FALLING);

  Serial.println("Sistema listo.");
}

//---------------------------
// Loop principal
//---------------------------
void loop() {
  mostrarNumero(ultimaTemp); // Mostrar siempre la última temperatura

  if (botonPresionado) {
    botonPresionado = false;

    long suma = 0;
    for (int i = 0; i < 50; i++) {
      suma += analogRead(LM35_PIN);
      delay(2);
    }
    unsigned int valorADC = suma / 50;

    // Conversión ADC → temperatura
    float tempC = (valorADC * (5.0 / 4095.0)) * 100.0;
    tempC = tempC * factorCalibracion;

    // --- EMA: suaviza las lecturas ---
    ultimaTemp = (alpha * tempC) + ((1 - alpha) * ultimaTemp);

    Serial.print("Temperatura filtrada: ");
    Serial.print(ultimaTemp, 1);
    Serial.println(" ºC");

    // Apagar LEDs
    digitalWrite(LED_AMARILLO, LOW);
    digitalWrite(LED_NARANJA, LOW);
    digitalWrite(LED_ROJO, LOW);

    // Encender LED según zona
    if (ultimaTemp < 22.0) digitalWrite(LED_AMARILLO, HIGH);
    else if (ultimaTemp <= 25.0) digitalWrite(LED_NARANJA, HIGH);
    else digitalWrite(LED_ROJO, HIGH);

    // Mover servo
    moverServoPorZona(ultimaTemp);
  }
}
