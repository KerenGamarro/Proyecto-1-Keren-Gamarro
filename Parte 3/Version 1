//******************************************
// Universidad del Valle de Guatemala
// BE3029 - Electronica Digital 2
// Keren Gamarro
// 19/08/2025
// Proyecto 1 - Lectura de temperatura con LM35, LEDs y Servo
// MCU: ESP32 dev kit 1.0
//en teoria funcionan los limites de temperatura pero se cambiaran a los que tengo en este momento para ver si funcionan
//******************************************

#include <Arduino.h>
#include <stdint.h>

//******************************************
// Definiciones
//******************************************
#define LM35_PIN      32   // Pin ADC para LM35
#define BOTON_PIN     33   // Pin del bot√≥n
#define LED_AMARILLO  18   // LED Amarillo (<22¬∞C)
#define LED_NARANJA    4   // LED Naranja (22‚Äì25¬∞C)
#define LED_ROJO      15   // LED Rojo (>25¬∞C)

#define SERVO_PIN     27   // Servo en pin 27
#define SERVO_CANAL    0   // Canal PWM para Servo
#define SERVO_FREQ    50   // Frecuencia PWM para Servo (50Hz)
#define SERVO_RES    16    // Resoluci√≥n 16 bits

//******************************************
// Variables globales
//******************************************
bool botonPresionado = false;
//float factorCalibracion = 2.09;  // ‚ùå Desactivamos, estaba inflando mucho
float factorCalibracion = 1.0;     // ‚úÖ valor base sin correcci√≥n

//******************************************
// ISRs
//******************************************
void IRAM_ATTR botonISR() {
  botonPresionado = true;
}

//******************************************
// Funci√≥n auxiliar: mover servo
//******************************************
void moverServo(float tempC) {
  // Duty min y max para servo (500¬µs a 2400¬µs)
  int dutyMin = 1638;   // 500¬µs ‚âà 1638 en 16 bits
  int dutyMax = 7864;   // 2400¬µs ‚âà 7864 en 16 bits

  // Mapear temperatura 15¬∞C‚Äì35¬∞C ‚Üí 0¬∞‚Äì180¬∞
  float angulo = map((int)tempC, 15, 35, 0, 180);
  if (angulo < 0) angulo = 0;
  if (angulo > 180) angulo = 180;

  // Convertir √°ngulo a duty
  int duty = map((int)angulo, 0, 180, dutyMin, dutyMax);
  ledcWrite(SERVO_CANAL, duty);

  Serial.print("Servo en angulo: ");
  Serial.print(angulo);
  Serial.println("¬∞");
}

//******************************************
// Configuraci√≥n
//******************************************
void setup() {
  Serial.begin(115200);

  pinMode(LM35_PIN, INPUT);
  pinMode(BOTON_PIN, INPUT_PULLUP);

  pinMode(LED_AMARILLO, OUTPUT);
  pinMode(LED_NARANJA, OUTPUT);
  pinMode(LED_ROJO, OUTPUT);

  // Configuraci√≥n PWM servo
  ledcSetup(SERVO_CANAL, SERVO_FREQ, SERVO_RES);
  ledcAttachPin(SERVO_PIN, SERVO_CANAL);

  // üöÄ Colocar servo en posici√≥n inicial (0¬∞)
  int dutyMin = 1638; // corresponde a 0¬∞
  ledcWrite(SERVO_CANAL, dutyMin);

  attachInterrupt(digitalPinToInterrupt(BOTON_PIN), botonISR, FALLING);

  Serial.println("Sistema listo. Servo en posicion inicial (0¬∞).");
}

//******************************************
// Loop Principal
//******************************************
void loop() {
  if (botonPresionado) {
    botonPresionado = false;

    // Filtro por promedio (50 muestras)
    long suma = 0;
    for (int i = 0; i < 50; i++) {
      suma += analogRead(LM35_PIN);
      delay(2);
    }
    unsigned int valorADC = suma / 50;

    // Conversi√≥n LM35 (10mV/¬∞C, ADC 12 bits, Vref 3.3V)
    float tempC = (valorADC * (3.3 / 4095.0)) * 100.0;
    tempC = tempC * factorCalibracion;

    // Mostrar temperatura
    Serial.print("Temperatura filtrada: ");
    Serial.print(tempC, 1);
    Serial.println(" ¬∫C");

    // LEDs seg√∫n rango
    analogWrite(LED_AMARILLO, 0);
    analogWrite(LED_NARANJA, 0);
    analogWrite(LED_ROJO, 0);

    if (tempC < 22.0) {
      analogWrite(LED_AMARILLO, 255);
    } else if (tempC >= 22.0 && tempC <= 25.0) {
      analogWrite(LED_NARANJA, 255);
    } else {
      analogWrite(LED_ROJO, 255);
    }

    // Mover servo
    moverServo(tempC);
  }
}
