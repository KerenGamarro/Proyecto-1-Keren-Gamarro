//******************************************
// Universidad del Valle de Guatemala
// BE3029 - Electronica Digital 2
// Keren Gamarro
// 25/08/2025
// Proyecto 1 - Lectura de temperatura con LM35 y LEDs indicativos
// MCU: ESP32 dev kit 1.0
// agarro a menores temperaturas pero tiene un deficit como de 6, ahora cambio a nuevos pines porque conecte display
//******************************************

//******************************************
// Librerías
//******************************************
#include <Arduino.h>   // Librería base de Arduino para usar funciones como pinMode, digitalWrite, etc.
#include <stdint.h>    // Librería estándar de C para tipos de datos enteros (uint8_t, uint16_t, etc.)

//******************************************
// Definiciones
//******************************************
#define LM35_PIN      34   // Pin analógico donde está conectado el sensor LM35
#define BOTON_PIN     33   // Pin del botón para iniciar lectura
#define LED_AMARILLO  27   // LED indicador de temperatura < 22 °C
#define LED_NARANJA   26   // LED indicador de temperatura entre 22 y 25 °C
#define LED_ROJO      25   // LED indicador de temperatura > 25 °C

//******************************************
// Variables globales
//******************************************
bool botonPresionado = false;  // Bandera para indicar si se presionó el botón
float factorCalibracion = 2.09; // Factor de corrección del sensor (porque el LM35 no mide exacto con el ADC del ESP32)
float tempFiltrada = 25.0;      // Valor inicial de temperatura para filtro exponencial

//******************************************
// ISRs (Rutinas de Interrupción)
//******************************************
// Esta función se ejecuta automáticamente cuando se presiona el botón
// Marca la variable 'botonPresionado' como true para indicar al loop principal
void IRAM_ATTR botonISR() {
  botonPresionado = true;
}

//******************************************
// Configuración inicial
//******************************************
void setup() {
  Serial.begin(115200);  // Inicializa comunicación serial para ver datos en el monitor

  pinMode(LM35_PIN, INPUT);        // Pin de sensor LM35 como entrada
  pinMode(BOTON_PIN, INPUT_PULLUP);// Botón como entrada con resistencia interna pull-up
  pinMode(LED_AMARILLO, OUTPUT);   // LEDs como salida
  pinMode(LED_NARANJA, OUTPUT);
  pinMode(LED_ROJO, OUTPUT);

  // Configuración de interrupción: cuando el botón cambia de HIGH a LOW (FALLING), llama a botonISR()
  attachInterrupt(digitalPinToInterrupt(BOTON_PIN), botonISR, FALLING);

  Serial.println("Sistema listo. Presiona el botón para leer temperatura...");
}

//******************************************
// Loop Principal
//******************************************
void loop() {
  // Solo entra si el botón fue presionado
  if (botonPresionado) {
    botonPresionado = false; // Se resetea la bandera

    // --- Lectura con promedio de varias muestras para estabilidad ---
    long suma = 0;
    for (int i = 0; i < 50; i++) {         // Lee el sensor 50 veces
      suma += analogRead(LM35_PIN);        // Suma cada valor leído
      delay(2);                            // Pequeño retardo para estabilidad
    }
    unsigned int valorADC = suma / 50;     // Promedio de las 50 lecturas

    // --- Conversión a temperatura ---
    // Fórmula: ADC (0-4095) -> Voltaje (0-3.3V) -> Temperatura (10mV/°C para LM35)
    float tempC = (valorADC * (3.3 / 4095.0)) * 100.0;

    // Ajuste con factor de calibración para corregir errores de ADC/LM35
    tempC = tempC * factorCalibracion;

    // --- Filtro Exponencial (EMA) ---
    // Esto suaviza las lecturas evitando "saltos" bruscos
    float alpha = 0.1; // Peso del dato nuevo (10%)
    tempFiltrada = (alpha * tempC) + ((1 - alpha) * tempFiltrada);

    // --- Mostrar en el monitor serial ---
    Serial.print("ADC: ");
    Serial.print(valorADC);
    Serial.print("  |  Temperatura filtrada: ");
    Serial.print(tempFiltrada, 2);
    Serial.println(" ºC");

    // --- Apagar todos los LEDs antes de encender el correcto ---
    analogWrite(LED_AMARILLO, 0);
    analogWrite(LED_NARANJA, 0);
    analogWrite(LED_ROJO, 0);

    // --- Encender el LED correspondiente según el rango de temperatura ---
    if (tempFiltrada < 22.0) {
      analogWrite(LED_AMARILLO, 255); // Máxima intensidad
    } 
    else if (tempFiltrada >= 22.0 && tempFiltrada <= 25.0) {
      analogWrite(LED_NARANJA, 255);
    } 
    else {
      analogWrite(LED_ROJO, 255);
    }
  }
}

