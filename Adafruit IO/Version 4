//******************************************
// Universidad del Valle de Guatemala
// BE3029 - Electronica Digital 2
// Keren Gamarro
// 27/08/2025
// Proyecto 1 - LM35 con servo tipo semáforo + Display 7 segmentos + Adafruit IO
// Multiplexeo con Timers (display estable sin parpadeo)
// al cambiar el uso del display con timers ya funciona apropiadamente
//******************************************

#include <Arduino.h>
#include <stdint.h>
#include "WiFi.h"
#include "AdafruitIO_WiFi.h"

// ---------------------------
// Adafruit IO (credenciales)
// ---------------------------
#define IO_USERNAME  "Keren_Gabriela"
#define IO_KEY       "io_GBqo77aCGsP0YapYLvDRMRorXhT4" //solo agregar a al inicio

#define WIFI_SSID    "Keren Gabriela"
#define WIFI_PASS    "kaylaythorin04"

AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS);
AdafruitIO_Feed *tempFeed = io.feed("Temperatura");

// ---------------------------
// Pines LM35 y control
// ---------------------------
#define LM35_PIN      34
#define BOTON_PIN     33
#define LED_AMARILLO  27
#define LED_NARANJA   26
#define LED_ROJO      25

// ---------------------------
// Configuración del Servo
// ---------------------------
#define SERVO_PIN     13
#define SERVO_CANAL    0
#define SERVO_FREQ    50
#define SERVO_RES     16

// ---------------------------
// Segmentos display 7 seg
// ---------------------------
#define SEG_A 23
#define SEG_B 14
#define SEG_C 18
#define SEG_D 15
#define SEG_E 5
#define SEG_F 12
#define SEG_G 4
#define SEG_P 2

#define DIG1 22
#define DIG2 21
#define DIG3 19

// ---------------------------
// Variables globales
// ---------------------------
bool botonPresionado = false;
float factorCalibracion = 1.0;
float ultimaTemp = 0.0;
float alpha = 0.1;

// Servo posiciones
const int servoAmarillo = 30;
const int servoNaranja  = 90;
const int servoRojo     = 150;
const int servoMin      = 0;

// Tabla de números
const byte numToSeg[10][7] = {
  {1,1,1,1,1,1,0}, {0,1,1,0,0,0,0}, {1,1,0,1,1,0,1}, {1,1,1,1,0,0,1},
  {0,1,1,0,0,1,1}, {1,0,1,1,0,1,1}, {1,0,1,1,1,1,1}, {1,1,1,0,0,0,0},
  {1,1,1,1,1,1,1}, {1,1,1,1,0,1,1}
};

// ---------------------------
// Variables para el display
// ---------------------------
hw_timer_t *timer = NULL;
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;
volatile int digitoActual = 0;
volatile int valoresDisplay[3] = {0,0,0};
volatile bool puntoDecimal[3] = {false,false,false};

// ---------------------------
// ISR del botón
// ---------------------------
void IRAM_ATTR botonISR() {
  botonPresionado = true;
}

// ---------------------------
// Encender dígito
// ---------------------------
void IRAM_ATTR mostrarDigitoISR(int num, bool punto) {
  digitalWrite(SEG_A, numToSeg[num][0]);
  digitalWrite(SEG_B, numToSeg[num][1]);
  digitalWrite(SEG_C, numToSeg[num][2]);
  digitalWrite(SEG_D, numToSeg[num][3]);
  digitalWrite(SEG_E, numToSeg[num][4]);
  digitalWrite(SEG_F, numToSeg[num][5]);
  digitalWrite(SEG_G, numToSeg[num][6]);
  digitalWrite(SEG_P, punto ? HIGH : LOW);
}

// ---------------------------
// ISR del timer (multiplexeo)
// ---------------------------
void IRAM_ATTR onTimer() {
  portENTER_CRITICAL_ISR(&mux);

  // Apagar todos los dígitos
  digitalWrite(DIG1, LOW);
  digitalWrite(DIG2, LOW);
  digitalWrite(DIG3, LOW);

  // Mostrar el dígito correspondiente
  mostrarDigitoISR(valoresDisplay[digitoActual], puntoDecimal[digitoActual]);

  // Encender el dígito actual
  if (digitoActual == 0) digitalWrite(DIG1, HIGH);
  else if (digitoActual == 1) digitalWrite(DIG2, HIGH);
  else digitalWrite(DIG3, HIGH);

  // Avanzar al siguiente
  digitoActual = (digitoActual + 1) % 3;

  portEXIT_CRITICAL_ISR(&mux);
}

// ---------------------------
// Actualizar valores del display
// ---------------------------
void actualizarDisplay(float temp) {
  int dec  = (int)temp / 10;
  int uni  = (int)temp % 10;
  int deci = (int)(temp * 10) % 10;

  valoresDisplay[0] = dec;
  valoresDisplay[1] = uni;
  valoresDisplay[2] = deci;

  puntoDecimal[0] = false;
  puntoDecimal[1] = true;   // decimal entre unidades y décimas
  puntoDecimal[2] = false;
}

// ---------------------------
// Servo según zona
// ---------------------------
void moverServoPorZona(float tempC) {
  int duty = 0;
  if (tempC < 22.0) duty = map(servoAmarillo, 0, 180, 1638, 7864);
  else if (tempC <= 25.0) duty = map(servoNaranja, 0, 180, 1638, 7864);
  else duty = map(servoRojo, 0, 180, 1638, 7864);
  ledcWrite(SERVO_CANAL, duty);
}

// ---------------------------
// Setup
// ---------------------------
void setup() {
  Serial.begin(115200);

  pinMode(LM35_PIN, INPUT);
  pinMode(BOTON_PIN, INPUT_PULLUP);
  pinMode(LED_AMARILLO, OUTPUT);
  pinMode(LED_NARANJA, OUTPUT);
  pinMode(LED_ROJO, OUTPUT);

  pinMode(SEG_A, OUTPUT); pinMode(SEG_B, OUTPUT); pinMode(SEG_C, OUTPUT);
  pinMode(SEG_D, OUTPUT); pinMode(SEG_E, OUTPUT); pinMode(SEG_F, OUTPUT);
  pinMode(SEG_G, OUTPUT); pinMode(SEG_P, OUTPUT);

  pinMode(DIG1, OUTPUT); pinMode(DIG2, OUTPUT); pinMode(DIG3, OUTPUT);

  // Servo
  ledcSetup(SERVO_CANAL, SERVO_FREQ, SERVO_RES);
  ledcAttachPin(SERVO_PIN, SERVO_CANAL);
  ledcWrite(SERVO_CANAL, map(servoMin, 0, 180, 1638, 7864));

  // Interrupción botón
  attachInterrupt(digitalPinToInterrupt(BOTON_PIN), botonISR, FALLING);

  // Timer para display: cada 2ms (500 Hz de refresco total)
  timer = timerBegin(0, 80, true); // 80 MHz / 80 = 1 MHz → 1 tick = 1us
  timerAttachInterrupt(timer, &onTimer, true);
  timerAlarmWrite(timer, 2000, true); // cada 2000us = 2ms
  timerAlarmEnable(timer);

  // Conexión a Adafruit IO
  Serial.print("Conectando a Adafruit IO...");
  io.connect();
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println(" conectado!");

  actualizarDisplay(0.0);
}

// ---------------------------
// Loop
// ---------------------------
void loop() {
  io.run();

  if (botonPresionado) {
    botonPresionado = false;

    // Leer sensor
    long suma = 0;
    for (int i = 0; i < 50; i++) {
      suma += analogRead(LM35_PIN);
      delay(2);
    }
    unsigned int valorADC = suma / 50;

    // Conversión (ESP32 = 3.3V de ref)
    float tempC = (valorADC * (3.3 / 4095.0)) * 100.0;
    tempC = tempC * factorCalibracion;

    // Filtro EMA
    ultimaTemp = (alpha * tempC) + ((1 - alpha) * ultimaTemp);

    Serial.print("Temperatura filtrada: ");
    Serial.print(ultimaTemp, 1);
    Serial.println(" ºC");

    tempFeed->save(ultimaTemp);

    // LEDs según zona
    digitalWrite(LED_AMARILLO, LOW);
    digitalWrite(LED_NARANJA, LOW);
    digitalWrite(LED_ROJO, LOW);
    if (ultimaTemp < 22.0) digitalWrite(LED_AMARILLO, HIGH);
    else if (ultimaTemp <= 25.0) digitalWrite(LED_NARANJA, HIGH);
    else digitalWrite(LED_ROJO, HIGH);

    moverServoPorZona(ultimaTemp);

    // Actualizar valores a mostrar en display
    actualizarDisplay(ultimaTemp);
  }
}
